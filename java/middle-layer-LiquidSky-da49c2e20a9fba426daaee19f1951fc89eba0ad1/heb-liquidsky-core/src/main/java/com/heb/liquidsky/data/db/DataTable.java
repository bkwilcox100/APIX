package com.heb.liquidsky.data.db;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;

import com.heb.liquidsky.data.DataStoreException;
import com.heb.liquidsky.data.DataType;
import com.heb.liquidsky.data.xml.ColumnElement;
import com.heb.liquidsky.data.xml.TableElement;

/**
 * This class is an object representation of a &lt;table>
 * configuration in the data-store.xml file.
 */
public class DataTable implements DataStoreMarshaller {

	private static final String DEFAULT_COLUMN_CREATION_DATE = "creation_date";
	private static final String DEFAULT_COLUMN_LAST_MODIFIED_DATE = "last_modified_date";

	private enum DATABASE_TYPE { PRIMARY, AUXILIARY, REFERENCE };

	private String autoGeneratedFieldsQuery;
	private final List<DataColumn> columns;
	private final DATABASE_TYPE databaseType;
	private final DatabaseDataType dataType;
	private String deleteQuery;
	private String deleteReferenceQuery;
	private final String idColumn;
	private String insertQuery;
	private String insertQueryAuto;
	private String insertReferenceQuery;
	private String lastModifiedQuery;
	private final boolean lazyLoad;
	private final String name;
	private String readQuery;
	private String updateQuery;

	protected DataTable(DatabaseDataType dataType, TableElement marshaller) throws DataStoreException {
		this.columns = new ArrayList<>();
		this.dataType = dataType;
		if (marshaller.getColumns() != null) {
			for (ColumnElement columnMarshaller : marshaller.getColumns()) {
				this.columns.add(new DataColumn(this, columnMarshaller));
			}
		}
		this.idColumn = (marshaller.getIdColumn() != null) ? marshaller.getIdColumn() : "id";
		this.lazyLoad = marshaller.isLazyLoad();
		this.name = marshaller.getName();
		if (StringUtils.equalsIgnoreCase(marshaller.getType(), DATABASE_TYPE.AUXILIARY.toString())) {
			this.databaseType = DATABASE_TYPE.AUXILIARY;
		} else if (StringUtils.equalsIgnoreCase(marshaller.getType(), DATABASE_TYPE.REFERENCE.toString())) {
			this.databaseType = DATABASE_TYPE.REFERENCE;
		} else if (StringUtils.equalsIgnoreCase(marshaller.getType(), DATABASE_TYPE.PRIMARY.toString())) {
			this.databaseType = DATABASE_TYPE.PRIMARY;
			this.addDefaultDateColumn(DataType.PROP_CREATION_DATE, DEFAULT_COLUMN_CREATION_DATE);
			this.addDefaultDateColumn(DataType.PROP_LAST_MODIFIED_DATE, DEFAULT_COLUMN_LAST_MODIFIED_DATE);
		} else {
			throw new DataStoreException("Invalid config for " + this.getName() + ": table elements must specify a valid 'type' value. '" + marshaller.getType() + "' is not valid");
		}
		this.validateConfig();
	}

	/**
	 * All data items have a last modified date and a creation date,
	 * both of which are read-only properties that are managed internally.
	 * It is not necessary to configure these properties in the data-store.xml
	 * file, so if they are not explicitly configured then create them using
	 * defaults.
	 */
	private void addDefaultDateColumn(String property, String column) throws DataStoreException {
		if (!this.hasProperty(property)) {
			ColumnElement dateMarshaller = new ColumnElement(column, property);
			this.columns.add(new DataColumn(this, dateMarshaller));
		}
	}

	protected String autoGeneratedFieldsQuery() {
		if (this.autoGeneratedFieldsQuery == null) {
			this.autoGeneratedFieldsQuery = "select " + this.getCreationDateColumn() + ", " + this.getLastModifiedDateColumn() + " ";
			this.autoGeneratedFieldsQuery += "from " + this.getName() + " where " + this.getIdColumn() + "=?";
		}
		return this.autoGeneratedFieldsQuery;
	}

	protected String deleteQuery() {
		if (this.deleteQuery == null) {
			this.deleteQuery = "delete from " + this.getName() + " where " + this.getIdColumn() + "=?";
		}
		return this.deleteQuery;
	}

	protected String deleteReferenceQuery() {
		if (this.deleteReferenceQuery == null) {
			this.deleteReferenceQuery = "update " + this.getName() + " set " + this.getIdColumn() + "=null where " + this.getIdColumn() + "=?";
		}
		return this.deleteReferenceQuery;
	}

	protected List<DataColumn> getColumns() {
		return this.columns;
	}

	private String getCreationDateColumn() {
		return this.getColumnForProperty(DataType.PROP_CREATION_DATE).getColumnName();
	}

	protected DatabaseDataType getDataType() {
		return this.dataType;
	}

	private String getIdColumn() {
		return this.idColumn;
	}

	protected DataColumn getColumnForProperty(String property) {
		for (DataColumn dataColumn : this.getColumns()) {
			if (dataColumn.getProperty().equals(property)) {
				return dataColumn;
			}
		}
		return null;
	}

	private String getLastModifiedDateColumn() {
		return this.getColumnForProperty(DataType.PROP_LAST_MODIFIED_DATE).getColumnName();
	}

	protected boolean isLazyLoad() {
		return this.lazyLoad;
	}

	protected DataColumn getListItemColumn() {
		if (this.getColumns().size() != 1) {
			return null;
		}
		if (this.getColumns().get(0).getListItemType() == null) {
			return null;
		}
		return this.getColumns().get(0);
	}

	protected DataColumn getReferenceColumn() {
		if (!this.isReference()) {
			throw new IllegalStateException("getReferenceColumn() can only be invoked for reference tables");
		}
		return this.getColumns().get(0);
	}

	protected String getName() {
		return this.name;
	}

	protected boolean hasProperty(String property) {
		return (this.getColumnForProperty(property) != null);
	}

	/**
	 * @param autoGenerateId Set to <code>true</code> if the ID column
	 *  should be omitted from the insert query; useful when the database
	 *  specifies AUTO_INCREMENT for primary key generation.
	 */
	protected String insertQuery(boolean autoGenerateId) {
		if (this.insertQuery == null || this.insertQueryAuto == null) {
			this.insertQuery = this.buildInsertQuery(false);
			this.insertQueryAuto = this.buildInsertQuery(true);
		}
		return (autoGenerateId) ? this.insertQueryAuto : this.insertQuery;
	}

	private String buildInsertQuery(boolean autoGenerateId) {
		String columnsSql = "";
		String valuesSql = "";
		if (!this.isPrimary()) {
			// id is not a configured property for non-primary tables,
			// so it must be explicitly included in the SQL
			columnsSql += this.getIdColumn();
			valuesSql += "?";
		}
		for (DataColumn dataColumn : this.getColumns()) {
			if (!dataColumn.isInsertable(autoGenerateId)) {
				continue;
			}
			if (!StringUtils.isBlank(columnsSql)) {
				columnsSql += ",";
				valuesSql += ",";
			}
			columnsSql += dataColumn.getColumnName();
			valuesSql += "?";
		}
		return "insert into " + this.getName() + " (" + columnsSql + ") values (" + valuesSql + ")";
	}

	protected String insertReferenceQuery() {
		if (this.insertReferenceQuery == null) {
			this.insertReferenceQuery = "update " + this.getName() + " set " + this.getIdColumn() + "=? where " + this.getReferenceColumn().getColumnName() + "=?";
		}
		return this.insertReferenceQuery;
	}

	protected boolean isAuxiliary() {
		return (this.databaseType == DATABASE_TYPE.AUXILIARY);
	}

	protected boolean isPrimary() {
		return (this.databaseType == DATABASE_TYPE.PRIMARY);
	}

	protected boolean isReference() {
		return (this.databaseType == DATABASE_TYPE.REFERENCE);
	}

	protected String lastModifiedQuery() {
		if (this.lastModifiedQuery == null) {
			this.lastModifiedQuery = "select " + this.getLastModifiedDateColumn() + " from " + this.getName() + " where " + this.getIdColumn() + "=?";
		}
		return this.lastModifiedQuery;
	}

	protected String readQuery() {
		if (this.readQuery == null) {
			this.readQuery = "select * from " + this.getName() + " where " + this.getIdColumn() + "=?";
		}
		return this.readQuery;
	}

	protected String updateQuery() {
		if (this.updateQuery == null) {
			this.updateQuery = "update " + this.getName();
			boolean first = true;
			for (DataColumn dataColumn : this.getColumns()) {
				if (!dataColumn.isUpdatable()) {
					continue;
				}
				this.updateQuery += ((first) ? " set" : ",");
				this.updateQuery += " " + dataColumn.getColumnName() + "=?";
				first = false;
			}
			if (this.isPrimary()) {
				// explicitly add the last modified date since MySQL won't
				// update it automatically if other values are unchanged
				this.updateQuery += ((first) ? " set" : ",");
				this.updateQuery += this.getLastModifiedDateColumn() + "=CURRENT_TIMESTAMP";
			}
			this.updateQuery += " where " + this.getIdColumn() + "=?";
		}
		return this.updateQuery;
	}

	@Override
	public void validateConfig() throws DataStoreException {
		if (this.isReference() && this.getColumns().size() != 1) {
			throw new DataStoreException("Invalid config for " + this.getName() + ": reference tables can specify only one column");
		}
		for (DataColumn dataColumn : this.getColumns()) {
			if (dataColumn.getListItemType() != null && this.getColumns().size() != 1) {
				throw new DataStoreException("Invalid config for " + this.getName() + ": tables containing a list-item-type cannot contain any other columns");
			}
		}
	}
}
