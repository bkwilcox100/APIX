package com.heb.liquidsky.pubsub;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.apache.commons.lang3.StringUtils;

import com.heb.liquidsky.common.CloudUtil;
import com.heb.liquidsky.common.HebEnvironmentProperties;
import com.heb.liquidsky.data.DataItem;
import com.heb.liquidsky.data.DataStore;
import com.heb.liquidsky.data.DataStoreException;
import com.heb.liquidsky.data.MutableDataItem;
import com.heb.liquidsky.pubsub.data.PubSubData.PUBSUB_ACTION;
import com.heb.liquidsky.pubsub.data.ShoppingListData;
import com.heb.liquidsky.taskqueue.HebFlexTaskQueue;
import com.heb.liquidsky.trace.HebFlexTracer;
import com.heb.liquidsky.trace.HebTraceContext;

public final class HEBPubSub extends GooglePubSubImpl {

	private static final Logger logger = Logger.getLogger(HEBPubSub.class.getName());
	private static final HebFlexTracer TRACER = HebFlexTracer.getTracer(HEBPubSub.class);
	private static final String APPLICATION_ID = "LIQUIDSKY";
	private static final String PROJECT_ID = HebEnvironmentProperties.getInstance().getAppEngineId();
	public static final String PUBSUB_SECURITY_TOKEN = "PUBSUB_SECURITY_TOKEN";
	private static final String PUBSUB_PUSH_ENDPOINT = CloudUtil.getProperty("PUBSUB_PUSH_ENDPOINT");

	private static final HEBPubSub INSTANCE = new HEBPubSub();

	private HEBPubSub() {
		// only allow access to this class via the singleton instance
	}

	@Override
	public String getApplicationId() {
		return (HebEnvironmentProperties.getInstance().isLocalInstance()) ? "local-" + APPLICATION_ID : APPLICATION_ID;
	}

	/**
	 * Return a reference to the singleton HEBPubSub instance.
	 */
	public static HEBPubSub getInstance() {
		return INSTANCE;
	}

	private HebPubSubMessage getMessage(DataItem dataItem, PUBSUB_ACTION action) throws DataStoreException, IOException {
		HebPubSubMessage message = new HebPubSubMessage(dataItem.getId());
		// TODO 
		ShoppingListData shoppingList = new ShoppingListData(this, dataItem.getId(), action, dataItem.getString("listName"));
		message.setData(shoppingList);
		return message;
	}

	@Override
	public String getProjectId() {
		return PROJECT_ID;
	}

	@Override
	protected String getPushEndpoint() {
		if (HebEnvironmentProperties.getInstance().isLocalInstance()) {
			// TODO - push endpoint must be publicly accessible, otherwise the
			// notification cannot be delivered
			return null;
		}
		String url = PUBSUB_PUSH_ENDPOINT;
		return StringUtils.isBlank(url) ? null : CloudUtil.appendQueryParam(url, PUBSUB_TOKEN_PARAM, CloudUtil.getProperty(HEBPubSub.PUBSUB_SECURITY_TOKEN));
	}

	public void processMessage(HebPubSubMessage message) throws IOException, DataStoreException {
		ShoppingListData data = (ShoppingListData) message.getData();
		if (data.getSourceApplication().equals(this.getApplicationId()) && data.getSourceProject().equals(PROJECT_ID)) {
			if (logger.isLoggable(Level.INFO)) {
				logger.info("Ignoring pub/sub message because source indicates it was generated by the current project/application: " + data.getSourceProject() + "/" + data.getSourceApplication());
			}
			return;
		} else if (logger.isLoggable(Level.INFO)) {
			logger.info("Processing pub/sub message from project/application: " + data.getSourceProject() + "/" + data.getSourceApplication());
		}
		MutableDataItem dataItem = DataStore.getInstance().readItemForUpdate(data.getId(), data.getDataType());
		if (dataItem == null) {
			if (data.getAction() != PUBSUB_ACTION.CREATE) {
				throw new DataStoreException("Pub/Sub update received for non-existent data item: " + message.toPrettyString());
			}
			dataItem = DataStore.getInstance().createItem(data.getDataType());
		}
		dataItem.setPubSubEnabled(false);
		dataItem.setProperty("listName", data.getListName());
		if (logger.isLoggable(Level.FINE)) {
			logger.fine("Processing pub/sub message for action " + data.getAction() + " for item " + dataItem.toString());
		}
		if (data.getAction() == PUBSUB_ACTION.CREATE) {
			DataStore.getInstance().insertItem(dataItem);
		} else if (data.getAction() == PUBSUB_ACTION.UPDATE) {
			DataStore.getInstance().updateItem(dataItem);
		} else if (data.getAction() == PUBSUB_ACTION.DELETE) {
			DataStore.getInstance().deleteItem(dataItem);
		}
	}

	/**
	 * Publish create/update/delete messages for the specified item.
	 * 
	 * @param dataItem The item that has been modified.
	 * @param action The type of modification that has occurred.
	 */
	public void publish(DataItem dataItem, PUBSUB_ACTION action) throws IOException {
		if (!this.publishAllowed(dataItem)) {
			return;
		}
		HebTraceContext context = TRACER.startSpan("publish");
		try {
			HebPubSubMessage message = null;
			try {
				message = this.getMessage(dataItem, action);
			} catch (DataStoreException e) {
				throw new IOException("Unable to generate pubsub message for item", e);
			}
			if (logger.isLoggable(Level.FINE)) {
				logger.fine("Sending message: " + message.toPrettyString());
			}
			this.publish(message);
		} finally {
			TRACER.endSpan(context);
		}
	}

	private boolean publishAllowed(DataItem dataItem) {
		if (!dataItem.getDataType().isPubSubEnabled()) {
			if (logger.isLoggable(Level.FINE)) {
				logger.fine("Pub/Sub message is disabled for data type " + dataItem.getDataType().getName());
			}
			return false;
		}
		if (dataItem instanceof MutableDataItem && !((MutableDataItem) dataItem).isPubSubEnabled()) {
			if (logger.isLoggable(Level.FINE)) {
				logger.fine("Pub/Sub message is disabled for data item " + dataItem.toString());
			}
			return false;
		}
		return true;
	}

	public void publishDeferred(DataItem dataItem, PUBSUB_ACTION action) {
		if (!this.publishAllowed(dataItem)) {
			return;
		}
		HebFlexTaskQueue.getInstance().addPubSubTask(dataItem, action);
	}

	/**
	 * Create a subscription to retrieve notifications for updates
	 * to the specified data item.
	 */
	public HebPubSubSubscription subscribe(DataItem dataItem, boolean pushNotifications) throws IOException {
		return this.subscribe(dataItem.getDataType().getName(), pushNotifications);
	}
}
