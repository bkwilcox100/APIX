<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>com.heb.liquidsky</groupId>
	<artifactId>heb-liquidsky-base</artifactId>
	<packaging>pom</packaging>
	<version>1.0.0</version>
	<name>HEB Liquid Sky Parent Project</name>

	<prerequisites>
		<maven>3.3.9</maven>
	</prerequisites>

	<modules>
		<module>heb-liquidsky-pubsub</module>
		<module>heb-liquidsky-core</module>
		<module>heb-liquidsky-spring-base</module>
		<module>heb-liquidsky-spring-swagger</module>
		<module>heb-liquidsky-web-default</module>
		<module>heb-liquidsky-service-appversion</module>
		<module>heb-liquidsky-service-apidiscovery</module>
		<module>heb-liquidsky-service-adminrest</module>
		<module>heb-liquidsky-service-shoppinglist</module>
		<module>heb-liquidsky-web-admin</module>
		<module>heb-liquidsky-taskqueue</module>
		<module>heb-productfeed</module>
	</modules>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<maven.compiler.showDeprecation>true</maven.compiler.showDeprecation>
		<archiveClasses>true</archiveClasses>
		<project.root.dir>${project.basedir}</project.root.dir>
		<spring.version>1.5.3.RELEASE</spring.version>
		<mysql.version>6.0.6</mysql.version>
		<failOnMissingWebXml>false</failOnMissingWebXml>
		<liquidsky.core.version>1.0.0-SNAPSHOT</liquidsky.core.version>
		<liquidsky.pubsub.version>1.0.0-SNAPSHOT</liquidsky.pubsub.version>
		<liquidsky.spring.base.version>1.0.0-SNAPSHOT</liquidsky.spring.base.version>
		<liquidsky.spring.swagger.version>1.0.0-SNAPSHOT</liquidsky.spring.swagger.version>
	</properties>

	<dependencyManagement>
		<dependencies>

			<!-- Test Dependencies -->
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>4.12</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>${project.groupId}</groupId>
				<artifactId>heb-liquidsky-core</artifactId>
				<version>${liquidsky.core.version}</version>
				<type>test-jar</type>
				<scope>test</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<!-- interpolate /build/*.properties into config & property files -->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.properties</include>
					<include>**/*.xml</include>
				</includes>
			</resource>
			<resource>
				<directory>src/main/appengine</directory>
				<filtering>true</filtering>
				<targetPath>${project.build.directory}/appengine</targetPath>
			</resource>
			<resource>
				<directory>src/main/application</directory>
				<includes>
					<include>**/*.xml</include>
				</includes>
			</resource>
			<resource>
				<directory>${project.basedir}</directory>
				<filtering>true</filtering>
				<targetPath>${project.build.directory}</targetPath>
				<includes>
					<include>*.yaml</include>
				</includes>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>src/test/java</directory>
				<filtering>true</filtering>
			</testResource>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
			</testResource>
		</testResources>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.1</version>
					<configuration>
						<source>${maven.compiler.source}</source>
						<target>${maven.compiler.target}</target>
					</configuration>
				</plugin>
				<!-- load properties as specified in the /build directory -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>properties-maven-plugin</artifactId>
					<version>1.0.0</version>
					<executions>
						<execution>
							<phase>initialize</phase>
							<goals>
								<goal>read-project-properties</goal>
							</goals>
							<configuration>
								<files>
									<!-- environment properties - need to figure out how to manage these -->
									<file>${project.root.dir}/build/environment-default.properties</file>
									<file>${project.root.dir}/build/environment-${user.name}.properties</file>
									<!-- Specifies a value in a LIQUID_SKY_BUILD property -->
									<file>${project.root.dir}/build/environment-${env.LIQUID_SKY_BUILD}.properties</file>
									<!-- Specifies a Google Project specific property file to use. Basically 
										a general environment like QA, UAT, or Prod -->
									<file>${project.root.dir}/build/environment-${liquidsky.build}.properties</file>
									<!-- Specifies properties that override service specific settings 
										to deploy single services outside of default (see appversion.properties for 
										an example) -->
									<!-- Command line example: -Dliquidsky.build=qa -Dliquidsky.build.service=shoppinglist -->
									<file>${project.root.dir}/build/environment-${liquidsky.build.service}.properties</file>
									<!-- application properties - will be moved to Cloud Storage -->
									<file>${project.root.dir}/build/application-default.properties</file>
									<file>${project.root.dir}/build/application-${user.name}.properties</file>
									<!-- Specifies a value in a LIQUID_SKY_BUILD property -->
									<file>${project.root.dir}/build/application-${env.LIQUID_SKY_BUILD}.properties</file>
									<!-- Specifies a Google Project specific property file to use. Basically 
										a general environment like QA, UAT, or Prod -->
									<file>${project.root.dir}/build/application-${liquidsky.build}.properties</file>
									<!-- Specifies properties that override service specific settings 
										to deploy single services outside of default (see appversion.properties for 
										an example) -->
									<!-- Command line example: -Dliquidsky.build=qa -Dliquidsky.build.service=shoppinglist -->
									<file>${project.root.dir}/build/application-${liquidsky.build.service}.properties</file>
								</files>
								<!-- do not fail if a properties file is not present -->
								<quiet>true</quiet>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-war-plugin</artifactId>
					<version>2.6</version>
					<configuration>
						<archiveClasses>true</archiveClasses>
						<webResources>
							<!-- interpolate /build/*.properties into appengine-web.xml -->
							<resource>
								<directory>${basedir}/src/main/webapp/WEB-INF</directory>
								<filtering>true</filtering>
								<targetPath>WEB-INF</targetPath>
							</resource>
						</webResources>
						<packagingExcludes>**/README.md</packagingExcludes>
					</configuration>
				</plugin>
				<plugin>
					<groupId>com.google.cloud.tools</groupId>
					<artifactId>appengine-maven-plugin</artifactId>
					<version>1.2.1</version>
					<configuration>
						<stage.appEngineDirectory>${project.build.directory}/appengine</stage.appEngineDirectory>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.19</version>
					<configuration>
						<systemProperties>
							<property>
								<name>java.util.logging.config.file</name>
								<value>src/test/resources/logging.properties</value>
							</property>
						</systemProperties>
					</configuration>
				</plugin>
				<!-- for hot reload of the web application -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>versions-maven-plugin</artifactId>
					<version>2.3</version>
					<executions>
						<execution>
							<phase>compile</phase>
							<goals>
								<goal>display-dependency-updates</goal>
								<goal>display-plugin-updates</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-antrun-plugin</artifactId>
					<version>1.8</version>
					<executions>
						<!-- quick bit that will prompt the user to continue. intended to stall 
							a cloud deploy in eclipse in case of accidental run configuration click. -->
						<execution>
							<id>prompt-to-continue</id>
							<configuration>
								<target>
									<input
										message="THIS WILL DEPLOY THE APPLICATION TO THE GOOGLE CLOUD APP ENGINE.  Are you sure you want to continue?"
										addproperty="shouldContinue" validargs="y,n" defaultvalue="n" />
									<fail>
										<condition>
											<equals arg1="${shouldContinue}" arg2="n" />
										</condition>
									</fail>
								</target>
							</configuration>
							<goals>
								<goal>run</goal>
							</goals>
						</execution>
						<!-- Used to copy jsp files in an auto build task. -->
						<execution>
							<id>copy-jsp</id>
							<configuration>
								<target>
									<echo
										message="copy to ${project.build.directory}/${project.build.finalName}" />
									<echo message="copy from ${basedir}/src/main/webapp" />
									<copy todir="${project.build.directory}/${project.build.finalName}"
										verbose="true">
										<fileset dir="${basedir}/src/main/webapp">
											<include name="**/*.jsp*" />
											<include name="**/resources/**" />
										</fileset>
									</copy>
								</target>
							</configuration>
							<goals>
								<goal>run</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>aspectj-maven-plugin</artifactId>
										<versionRange>[1.0,)</versionRange>
										<goals>
											<goal>test-compile</goal>
											<goal>compile</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-install-plugin
										</artifactId>
										<versionRange>
											[2.5,)
										</versionRange>
										<goals>
											<goal>install-file</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute>
											<runOnIncremental>false</runOnIncremental>
										</execute>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
				<!-- See https://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-maven-plugin.html 
					To run the app locally, use: mvn spring-boot:run -->
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<version>${spring.version}</version>
					<executions>
						<execution>
							<goals>
								<goal>repackage</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!-- To run it: mvn findbugs:findbugs, To see results: mvn findbugs:gui -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>findbugs-maven-plugin</artifactId>
					<version>3.0.1</version>
					<configuration>
						<effort>Max</effort>
						<threshold>Low</threshold>
						<failOnError>true</failOnError>
						<includeFilterFile>${project.root.dir}/findbugs-security-include.xml</includeFilterFile>
						<excludeFilterFile>${project.root.dir}/findbugs-security-exclude.xml</excludeFilterFile>
						<plugins>
							<plugin>
								<groupId>com.h3xstream.findsecbugs</groupId>
								<artifactId>findsecbugs-plugin</artifactId>
								<version>LATEST</version> <!-- Auto-update to the latest stable -->
							</plugin>
						</plugins>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

</project>
